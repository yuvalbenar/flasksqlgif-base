name: AWS CI/CD Pipeline
on:
  push:
    branches:
      - develop-aws
  pull_request:
    branches:
      - develop-aws

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Add secret to GITHUB_ENV
        run: |
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}" >> $GITHUB_ENV

      - name: Output GitHub Actions run number
        run: |
          echo "GitHub Actions Run Number: ${{ github.run_number }}"
          echo "CI/CD Pipeline Run Number: ${{ github.run_number }}" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build -t yuvalbenar/flasksqlgifbase:${{ github.run_number }} .

      - name: Docker login to Docker Hub
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

      - name: Push Docker image to Docker Hub
        run: |
          docker push yuvalbenar/flasksqlgifbase:${{ github.run_number }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_DEFAULT_REGION

      - name: Create EC2 key pair
        run: |
          aws ec2 create-key-pair --key-name MyDynamicKey --query 'KeyMaterial' --output text > my-dynamic-key.pem
          chmod 400 my-dynamic-key.pem

      - name: Launch EC2 instance
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-0ca9fb66e076a6e32 \
            --count 1 \
            --instance-type t2.micro \
            --key-name MyDynamicKey \
            --security-group-ids sg-0a1c36e26e49cd294 \
            --subnet-id subnet-08f24a5a589f2bcaf \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Wait for EC2 instance to be running
        run: |
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID

      - name: Get EC2 Public IP
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Copy project files to EC2 instance
        run: |
          scp -i my-dynamic-key.pem -r ./ ec2-user@$PUBLIC_IP:/home/ec2-user/project

      - name: Run Docker Compose on EC2
        run: |
          ssh -i my-dynamic-key.pem ec2-user@$PUBLIC_IP \
            "cd /home/ec2-user/project && docker-compose up -d"

      


      # Optional: If you want to terminate the instance and delete the key pair after use, you can add these steps below:
      # Uncomment them if needed.
      #
      # - name: Delete EC2 key pair
      #   run: |
      #     aws ec2 delete-key-pair --key-name MyDynamicKey
      #     rm -f my-dynamic-key.pem
      #
      # - name: Terminate EC2 instance
      #   if: always()
      #   run: |
      #     aws ec2 terminate-instances --instance-ids $INSTANCE_ID
