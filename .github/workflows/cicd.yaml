name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
        
      - name: Add secret to GITHUB_ENV
        run: |
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}" >> $GITHUB_ENV
          echo "AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV 
          echo "AZURE_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "AZURE_CREDENTIALS=${{ secrets.AZURE_CREDENTIALS }}" >> $GITHUB_ENV
          echo "AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> $GITHUB_ENV
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> $GITHUB_ENV
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> $GITHUB_ENV
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> $GITHUB_ENV
          echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> $GITHUB_ENV
          echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> $GITHUB_ENV
          echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> $GITHUB_ENV
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> $GITHUB_ENV
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> $GITHUB_ENV
          echo "FLASK_ENV=${{ secrets.FLASK_ENV }}" >> $GITHUB_ENV
          echo "FLASK_APP_URL=${{ secrets.FLASK_APP_URL }}" >> $GITHUB_ENV

      - name: Install Docker Compose
        run: |
          sudo curl -L https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Build Docker image
        run: |
          docker build -t yuvalbenar/flasksqlgifbase:v1.0.83 .

      - name: Docker login to Docker Hub
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

      - name: Push Docker image to Docker Hub
        run: |
          docker push yuvalbenar/flasksqlgifbase:v1.0.83

      - name: Build and start containers
        run: |
          docker-compose -f docker-compose.yaml up --build -d

      - name: Run tests
        run: |
          docker-compose -f docker-compose.yaml run test

      - name: Clean up containers
        run: |
          docker-compose -f docker-compose.yaml down --volumes --remove-orphans

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Azure CLI
        run: |
          curl -sL https://packages.microsoft.com/keys/microsoft.asc | sudo tee /etc/apt/trusted.gpg.d/microsoft.asc
          curl -sL https://packages.microsoft.com/repos/azure-cli/$(lsb_release -c | awk '{print $2}')/amd64/azure-cli.list | sudo tee /etc/apt/sources.list.d/azure-cli.list
          sudo apt-get update
          sudo apt-get install azure-cli
          az --version


      - name: Log in to Azure
        run: |
          az login --service-principal --username ${{ secrets.AZURE_CLIENT_ID }} --password ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Deploy Docker image to Azure Web App
        run: |
          az webapp config container set --name flasksqlgif-base --resource-group yuvirg --docker-custom-image-name yuvalbenar/flasksqlgifbase:v1.0.83 --docker-registry-server-url https://index.docker.io

      - name: Confirm deployment
        run: |
          az webapp show --name flasksqlgif-base --resource-group yuvirg
