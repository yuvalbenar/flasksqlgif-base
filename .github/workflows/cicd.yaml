name: CI/CD Pipeline

on:
  push:
    branches:
      - develop
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v2

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Set environment variables from secrets
      - name: Export secrets as environment variables
        run: |
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> $GITHUB_ENV
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> $GITHUB_ENV
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> $GITHUB_ENV
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> $GITHUB_ENV
          echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" >> $GITHUB_ENV
          echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> $GITHUB_ENV
          echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> $GITHUB_ENV
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> $GITHUB_ENV
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> $GITHUB_ENV
          echo "FLASK_ENV=${{ secrets.FLASK_ENV }}" >> $GITHUB_ENV
          echo "FLASK_APP_URL=${{ secrets.FLASK_APP_URL }}" >> $GITHUB_ENV

      # Build and start containers in the background
      - name: Build and start containers
        run: |
          docker-compose -f docker-compose.yaml up --build -d

      # Run unit tests
      - name: Run tests
        run: |
          docker-compose -f docker-compose.yaml run --rm test

      # Shut down containers after tests
      - name: Clean up containers
        run: |
          docker-compose -f docker-compose.yaml down --volumes --remove-orphans
