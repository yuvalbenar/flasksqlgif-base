name: CI/CD Pipeline

on:
  push:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-docker-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-

    - name: Build Docker images
      run: |
        docker-compose -f docker-compose.yaml build

    - name: Push Docker image to Docker Hub
      run: |
        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
        docker-compose -f docker-compose.yaml push

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Start the services in Docker Compose
      run: |
        docker-compose -f docker-compose.yaml up -d

    - name: Wait for Flask app to be ready
      run: |
        echo "Waiting for Flask app to be ready..."
        RETRIES=5
        until curl --fail http://localhost:5000; do
          echo "Flask app is not ready yet. Retrying..."
          RETRIES=$((RETRIES-1))
          if [ $RETRIES -le 0 ]; then
            echo "Flask app failed to start. Exiting."
            exit 1
          fi
          sleep 10
        done
        echo "Flask app is ready!"

    - name: Test if Flask app is running
      run: |
        curl --fail http://localhost:5000 || exit 1

    - name: Shut down containers after testing
      run: |
        docker-compose -f docker-compose.yaml down --volumes --remove-orphans

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

    - name: Log in to Azure
      run: |
        az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}

    - name: Deploy to Azure Web App
      run: |
        az webapp up --name flasksqlgif-base --resource-group yuvirg --plan ASP-yuvirg-bbdc --location "Canada Central" --sku B1 --docker-image "index.docker.io/yuvalbenar/flasksqlgifbase:v1.0.82"
