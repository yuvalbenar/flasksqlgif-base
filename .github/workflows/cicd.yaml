name: Build and Deploy Flask App to AWS EC2

on:
  push:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Build Docker image
        run: |
          docker build -t flasksqlgifbase .

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker image to Docker Hub
        run: |
          docker push yuvalbenar/flasksqlgifbase:v1.0.82

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create a new EC2 key pair
        id: create-key-pair
        run: |
          KEY_NAME="ec2-key-$(date +'%Y-%m-%d-%H-%M-%S')"
          aws ec2 create-key-pair --key-name "$KEY_NAME" --query 'KeyMaterial' --output text > "$KEY_NAME.pem"
          chmod 400 "$KEY_NAME.pem"
          echo "KEY_NAME=$KEY_NAME" >> $GITHUB_ENV
          echo "$KEY_NAME.pem" >> $GITHUB_ENV

      - name: Launch EC2 Instance
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --region ${{ secrets.AWS_REGION }} \
            --image-id ami-01816d07b1128cd2d \
            --instance-type t2.micro \
            --key-name ${{ env.KEY_NAME }} \
            --security-group-ids sg-0a1c36e26e49cd294 \
            --iam-instance-profile Name=access-to-s3 \
            --user-data '#!/bin/bash
            yum update -y
            yum install -y yum-utils device-mapper-persistent-data lvm2
            amazon-linux-extras enable docker
            yum install -y docker
            systemctl start docker
            systemctl enable docker
            usermod -aG docker ec2-user
            newgrp docker
            DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r ".tag_name")
            curl -L "https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose' \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=project}]' \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID --region ${{ secrets.AWS_REGION }}

      - name: Retrieve EC2 Public IP
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --region ${{ secrets.AWS_REGION }} \
            --instance-ids "$INSTANCE_ID" \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)

          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: SSH and deploy to EC2
        run: |
          scp -o StrictHostKeyChecking=no -i ${{ env.KEY_NAME }}.pem -r . ec2-user@$PUBLIC_IP:/home/ec2-user
          ssh -o StrictHostKeyChecking=no -i ${{ env.KEY_NAME }}.pem ec2-user@$PUBLIC_IP << 'EOF'
            cd /home/ec2-user
            docker-compose up -d
          EOF
