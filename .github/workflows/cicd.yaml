  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install AWS CLI
        run: |
          if ! command -v aws &> /dev/null; then
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Delete old SSH key pair and create a new one
        run: |
          set -ex
          aws ec2 delete-key-pair --key-name MyDynamicKey || true
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/MyDynamicKey -N ""
          aws ec2 import-key-pair --key-name MyDynamicKey --public-key-material fileb://~/.ssh/MyDynamicKey.pub

      - name: Deploy EC2 instance
        run: |
          set -ex
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-0037f7bd79427657a \
            --instance-type t2.micro \
            --key-name MyDynamicKey \
            --security-group-ids sg-0a1c36e26e49cd294 \
            --user-data '#!/bin/bash
            # Update and install Docker
            apt-get update -y
            apt-get install -y docker.io mysql-client

            # Add the ubuntu user to the docker group to allow non-root access to Docker
            usermod -aG docker ubuntu

            # Start and enable Docker
            systemctl start docker
            systemctl enable docker

            # Verify Docker is working correctly
            docker --version' \
            --query 'Instances[0].InstanceId' \
            --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          aws ec2 wait instance-status-ok --instance-ids $INSTANCE_ID
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: SCP project files to EC2 instance
        run: |
          set -ex
          scp -i ~/.ssh/MyDynamicKey -o StrictHostKeyChecking=no -r . ubuntu@${{ env.PUBLIC_IP }}:/home/ubuntu/project

      - name: Copy init.sql to EC2 instance
        run: |
          set -ex
          scp -i ~/.ssh/MyDynamicKey -o StrictHostKeyChecking=no init.sql ubuntu@${{ env.PUBLIC_IP }}:/home/ubuntu/project/init.sql

      - name: Create .env file on EC2
        run: |
          set -ex
          ssh -o ServerAliveInterval=60 -i ~/.ssh/MyDynamicKey -o StrictHostKeyChecking=no ubuntu@${{ env.PUBLIC_IP }} << 'EOF'
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" > /home/ubuntu/project/.env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> /home/ubuntu/project/.env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> /home/ubuntu/project/.env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> /home/ubuntu/project/.env
          echo "DATABASE_HOST=gif-db" >> /home/ubuntu/project/.env
          echo "DATABASE_PORT=3306" >> /home/ubuntu/project/.env
          echo "DATABASE_USER=${{ secrets.DATABASE_USER }}" >> /home/ubuntu/project/.env
          echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> /home/ubuntu/project/.env
          echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> /home/ubuntu/project/.env
          echo "FLASK_ENV=production" >> /home/ubuntu/project/.env
          echo "FLASK_APP_URL=${{ secrets.FLASK_APP_URL }}" >> /home/ubuntu/project/.env
          EOF

      - name: Run docker-compose on EC2 instance
        run: |
          set -ex
          ssh -o ServerAliveInterval=60 -i ~/.ssh/MyDynamicKey -o StrictHostKeyChecking=no ubuntu@${{ env.PUBLIC_IP }} << 'EOF'
          # Install missing dependencies for Docker Compose
          sudo apt-get install -y gcc libffi-dev libxcrypt-dev python3-dev

          # Install Docker Compose (if not already installed)
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

          # Verify docker-compose installation
          docker-compose --version

          # Run docker-compose in detached mode and monitor logs
          cd /home/ubuntu/project
          docker-compose up -d --build

          # Execute SQL commands to initialize database
          docker exec -i gif-db mysql -u root -p${{ secrets.MYSQL_ROOT_PASSWORD }} flaskdb < /home/ubuntu/project/init.sql

          # Test database connection from flaskgif container
          docker exec flasksqlgif-base flask db migrate
          EOF
