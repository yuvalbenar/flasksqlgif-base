name: CI/CD Pipeline for Flask App

on:
  push:
    branches:
      - develop  # Trigger the workflow on push to the 'develop' branch

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:19.03.12
        options: --privileged
    
    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v2

    # Set up Docker Buildx for building multi-platform images
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Clean up any old Docker containers before building
    - name: Docker cleanup
      run: |
        docker-compose -f docker-compose.yaml down --volumes --remove-orphans

    # Build the Docker image
    - name: Build Docker image
      run: |
        docker-compose -f docker-compose.yaml build

    # Start Flask app in the background
    - name: Start Flask app in the background
      run: |
        docker-compose -f docker-compose.yaml up -d

    # Wait for the Flask app to fully start
    - name: Wait for Flask app to start
      run: sleep 5

    # Test the application with curl
    - name: Test Flask app with curl
      run: |
        curl --fail http://localhost:5000 || exit 1  # Test if the app is accessible via curl

    # Run Bandit security check
    - name: Run Bandit security check
      run: |
        pip install bandit
        bandit -r . --configfile .bandit.yml || exit 1  # Run security checks using Bandit

    # Shutdown Docker containers after tests
    - name: Shutdown Docker containers
      run: docker-compose -f docker-compose.yaml down

  deploy:
    needs: build  # This ensures the deploy step only runs after the build is successful
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # Set up Azure CLI for deployment
    - name: Set up Azure CLI
      uses: azure/setup-azurecli@v1

    # Login to Azure using Service Principal credentials from GitHub secrets
    - name: Login to Azure
      run: |
        az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}

    # Deploy the app to Azure Web App for Containers
    - name: Deploy to Azure Web App
      run: |
        az webapp config container set --name flasksqlgif-base --resource-group yuvirg --docker-custom-image-name yuvalbenar/flasksqlgifbase:v1.0.82
        az webapp restart --name flasksqlgif-base --resource-group yuvirg
