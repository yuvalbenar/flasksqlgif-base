name: AWS CI/CD Pipeline

on:
  push:
    branches:
      - develop-aws
  pull_request:
    branches:
      - develop-aws

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Add secret to GITHUB_ENV
        run: |
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> $GITHUB_ENV
          echo "DOCKER_PASSWORD=${{ secrets.DOCKER_PASSWORD }}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=${{ secrets.AWS_DEFAULT_REGION }}" >> $GITHUB_ENV

      - name: Output GitHub Actions run number
        run: |
          echo "GitHub Actions Run Number: ${{ github.run_number }}"
          echo "CI_CD_PIPELINE_RUN_NUMBER=${{ github.run_number }}" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build -t yuvalbenar/flasksqlgifbase:${{ github.run_number }} .

      - name: Docker login to Docker Hub
        run: |
          echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin

      - name: Push Docker image to Docker Hub
        run: |
          docker push yuvalbenar/flasksqlgifbase:${{ github.run_number }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install AWS CLI
        run: |
          set -ex
          if ! command -v aws &> /dev/null; then
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          fi
          aws --version

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Create SSH key pair in AWS
        run: |
          set -ex
          # Generate a new SSH key pair locally
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/MyDynamicKey -N ""  # Generate a new SSH key pair
          cat ~/.ssh/MyDynamicKey.pub  # Output the public key for AWS
          
          # Create the key pair in AWS using AWS CLI
          aws ec2 import-key-pair --key-name MyDynamicKey --public-key-material file://~/.ssh/MyDynamicKey.pub

      - name: Deploy to AWS EC2
        run: |
          set -ex
          INSTANCE_ID=$(aws ec2 run-instances \
            --region ${{ secrets.AWS_DEFAULT_REGION }} \
            --image-id ami-01816d07b1128cd2d \
            --instance-type t2.micro \
            --key-name MyDynamicKey \
            --security-group-ids sg-0a1c36e26e49cd294 \
            --iam-instance-profile Name=access-to-s3 \
            --user-data '#!/bin/bash
            yum update -y
            yum install -y yum-utils device-mapper-persistent-data lvm2
            amazon-linux-extras enable docker
            yum install -y docker
            systemctl start docker
            systemctl enable docker
            usermod -aG docker ec2-user
            newgrp docker
            DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r ".tag_name")
            curl -L "https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose' \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=project}]' \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          aws ec2 wait instance-running --instance-ids $INSTANCE_ID --region ${{ secrets.AWS_DEFAULT_REGION }}

          PUBLIC_IP=$(aws ec2 describe-instances \
            --region ${{ secrets.AWS_DEFAULT_REGION }} \
            --instance-ids "$INSTANCE_ID" \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)

          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Copy project files to EC2 instance
        run: |
          scp -i ~/.ssh/MyDynamicKey -r ./ ec2-user@$PUBLIC_IP:/home/ec2-user/project

      - name: Run Docker Compose on EC2
        run: |
          ssh -i ~/.ssh/MyDynamicKey ec2-user@$PUBLIC_IP \
            "cd /home/ec2-user/project && docker-compose up -d"

      # Optional: Terminate EC2 instance and delete key pair after deployment
      # Uncomment if required
      #
      # - name: Delete EC2 key pair
      #   run: |
      #     aws ec2 delete-key-pair --key-name MyDynamicKey
      #     rm -f ~/.ssh/MyDynamicKey
      #
      # - name: Terminate EC2 instance
      #   if: always()
      #   run: |
      #     aws ec2 terminate-instances --instance-ids $INSTANCE_ID
