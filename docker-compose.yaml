name: CI/CD Pipeline

on:
  push:
    branches:
      - develop  # Runs only on the 'develop' branch

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:19.03.12
        options: --privileged
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      run: |
        docker buildx create --use

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      run: |
        docker build -t yuvalbenar/flasksqlgifbase:v1.0.${{ github.run_number }} .
        docker push yuvalbenar/flasksqlgifbase:v1.0.${{ github.run_number }}

  test:
    runs-on: ubuntu-latest
    services:
      docker:
        image: docker:19.03.12
        options: --privileged
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Docker Compose (needed for docker-compose commands)
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Verify Docker Compose installation
      run: docker-compose --version

    - name: Start containers using docker-compose
      run: |
        docker-compose -f docker-compose.yaml up -d
        # Wait for the application to start
        sleep 20  # Adjust time if necessary

    - name: Run tests with curl
      run: |
        curl --fail http://localhost:5000 || exit 1

    - name: Clean up Docker containers
      run: |
        docker-compose -f docker-compose.yaml down --volumes --remove-orphans

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Azure CLI
      uses: azure/CLI-action@v1

    - name: Log in to Azure
      run: |
        az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}

    - name: Deploy to Azure Web App
      run: |
        az webapp up --name flasksqlgif-base --resource-group yuvirg --plan ASP-yuvirg-bbdc --location "Canada Central" --sku B1

 


# version: '3.8'
# #to do: add .env file for securty and add it to .gitignore
# #init intilize database from docker compose
# services:
#   flaskgif:
#     build:
#       context: .
#       dockerfile: Dockerfile
#     container_name: flaskgif
#     ports:
#       - "5000:5000"
#     environment:
#       - FLASK_ENV=development
#       - DATABASE_HOST=gif-db
#       - DATABASE_PORT=3306
#       - DATABASE_NAME=flaskdb
#       - DATABASE_USER=yuvalbenar
#       - DATABASE_PASSWORD=password
#     depends_on:
#       - gif-db
#     networks:
#       - flaskapp-network

#   gif-db:
#     image: mysql:5.7
#     container_name: gif-db
#     environment:
#       MYSQL_ROOT_PASSWORD: password
#       MYSQL_DATABASE: flaskdb
#       MYSQL_USER: yuvalbenar
#       MYSQL_PASSWORD: password
#     ports:
#       - "3307:3306"
#     networks:
#       - flaskapp-network
#     volumes:
#       - mysql-data:/var/lib/mysql

# networks:
#   flaskapp-network:
#     driver: bridge

# volumes:
#   mysql-data:
